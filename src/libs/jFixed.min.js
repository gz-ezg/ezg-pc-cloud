(function ($) {
    $.fn.jFixedtable = function (options) {
        var options = $.extend({
            width: "640",
            height: "320",
            margin: "0",
            padding: "0",
            overflow: "hidden",
            colWidths: undefined,
            fixedCols: 0,
            headerRows: 1,
            onStart: function () {
            },
            onFinish: function () {
            },
            onCumclick: function () {
            },
            cssSkin: "sSky",
            edit: false,
            pkey: null
        }, options);
        return this.each(function () {
            this.cssSkin = options.cssSkin || "";
            this.headerRows = parseInt(options.headerRows || "1");
            this.fixedCols = parseInt(options.fixedCols || "0");
            this.colWidths = options.colWidths || [];
            this.initFunc = options.onStart || null;
            this.callbackFunc = options.onFinish || null;
            this.initFunc && this.initFunc();
            this.oncumclick = options.oncumclick;
            this.sHeaderHeight = 0;
            this.replaceStr = function (str) {
                str = str.replace(/&lt;/g, "<");
                str = str.replace(/&gt;/g, ">");
                return str;
            };
            this.id = $(this).attr("id");
            $(this).data("id", this.id);
            $table = $(this);
            $(this).attr("id", "");
            this.sBase = $("<div></div>");
            this.sFHeader = this.sBase.clone(true);
            this.sHeader = this.sBase.clone(true);
            this.sHeaderInner = this.sBase.clone(true);
            this.sFData = this.sBase.clone(true);
            this.sFDataInner = this.sBase.clone(true);
            this.sData = this.sBase.clone(true);
            this.sDataTable = $table;
            this.sColGroup = document.createElement("COLGROUP");
            this.sFHeader.addClass("sFHeader");
            this.sHeader.addClass("sHeader");
            this.sHeaderInner.addClass("sHeaderInner");
            this.sFData.addClass("sFData");
            this.sFDataInner.addClass("sFDataInner");
            this.sData.addClass("sData");
            this.sData.attr("id", this.id + "_sData");
            this.sBase.addClass("sBase");
            this.ToFixTb = function () {
                $table.wrap("<div></div>");
                $table.parent().append(this.sBase);
                this.sBase.parent().css({width: options.width, height: options.height});
                var $th = $table.find("tr:first");
                var $ths = $table.find("tr:first>td");
                if (!$ths) $ths = $table.find("tr:first>th");
                this.sHeaderTable = $("<table><tbody></tbody></table>");
                if (this.headerRows > 0) {
                    for (var i = 0; i < this.headerRows; i++) {
                        this.sHeaderHeight += parseInt($table.find("tr").eq(options.headerRows - 1).outerHeight());
                    }
                    ;$th = $table.find("tr:lt(" + this.headerRows + ")");
                }
                ;
                for (i = 0; i < this.headerRows; i++) {
                    this.sHeaderTable.append($table.find("tr").eq(i).clone(true));
                }
                ;this.sFHeaderWidth = 0;
                this.sHeaderInner.append(this.sHeaderTable);
                if (this.fixedCols) {
                    this.sFHeaderTable = this.sHeaderTable.clone(true);
                    this.sFHeader.append(this.sFHeaderTable);
                    this.sFDataTable = this.sDataTable.clone(true);
                    this.sFDataInner.append(this.sFDataTable);
                }
                ;var tds = $table.find("tr").eq(this.headerRows).find("td");
                for (i = 0, j = tds.size(); i < j; i++) {
                    if (i === this.colWidths.length || this.colWidths[i] === -1) {
                        this.colWidths[i] = parseInt(tds[i].offsetWidth);
                    }
                }
                ;
                for (i = 0; i < this.headerRows; i++) {
                    var tds = this.sDataTable.find("tr").eq(i).find("td");
                    for (var k = 0; k < tds.size(); k++) {
                        tds.eq(k).removeAttr("width");
                    }
                }
                ;
                for (i = 0, j = this.colWidths.length; i < j; i++) {
                    this.sColGroup.appendChild(document.createElement("COL"));
                    this.sColGroup.lastChild.setAttribute("width", this.colWidths[i]);
                }
                ;$(this.sColGroup.cloneNode(true)).prependTo(this.sDataTable);
                $(this.sColGroup.cloneNode(true)).prependTo(this.sHeaderTable);
                if (this.fixedCols > 0) {
                    $(this.sColGroup.cloneNode(true)).prependTo(this.sFHeaderTable);
                    $(this.sColGroup.cloneNode(true)).prependTo(this.sFDataTable);
                }
                ;
                if (this.fixedCols > 0) {
                    this.sBase.append(this.sFHeader);
                }
                ;this.sBase.append(this.sHeader);
                this.sHeader.append(this.sHeaderInner);
                if (this.fixedCols > 0) {
                    this.sFData.append(this.sFDataInner);
                    this.sBase.append(this.sFData);
                }
                ;this.sData.append(this.sDataTable);
                this.sBase.append(this.sData);
                if (this.fixedCols > 0) {
                    this.sFHeaderWidth = this.sDataTable[0].tBodies[0].rows[this.headerRows].cells[this.fixedCols].offsetLeft + 1;
                } else this.sFHeaderWidth = 0;
                this.sFHeader.css("width", this.sFHeaderWidth + "px");
                this.sData.css({
                    "margin-left": this.sFHeaderWidth,
                    "margin-top": this.sHeaderHeight,
                    height: (options.height - this.sHeaderHeight),
                    width: (options.width - this.sFHeaderWidth)
                });
                this.sDataTable.css({"margin-left": -this.sFHeaderWidth, "margin-top": -this.sHeaderHeight});
                this.id = $(this).data("id");
                this.sDataTable.attr("id", this.id);
                if (this.fixedCols > 0) {
                    this.sData.scroll(function () {
                        $(this).parent().find(".sHeaderInner").css({right: $(this).scrollLeft() + "px"});
                        $(this).parent().find(".sFDataInner").css({top: -1 * $(this).scrollTop() + "px"});
                    });
                } else {
                    this.sData.scroll(function () {
                        $(this).parent().find(".sHeaderInner").css({right: $(this).scrollLeft() + "px"});
                    });
                }
                ;
                if (options.edit) $("#" + this.id).jGrid({ftb: options});
            };
            this.ToFixTb();
        });
    }
})(jQuery);
(function ($) {
    $.fn.extend({
        jGrid: function (options) {
            var op = $.extend({
                onStart: function () {
                }, onFinish: function () {
                }, onCumclick: function () {
                }, cssSkin: "sSky", edit: false, fixed: false, ftb: null
            }, options);
            var $table = $(this);
            var $th = "<tr></tr>";
            var trs = gettrs();
            var head = op.ftb ? $(this).find("tr").eq(parseInt(op.ftb.headerRows) - 1) : $(this).find("tr:first");
            var ths = getth();
            var edittd = null;
            var currnettr = null;
            var isbr = false;
            var colums = [];
            this.pkey = [];
            init();
            return gettrs().each(function (i) {
                $(this).data("aonum", i);
                setrowcanedit(this);
            });

            function setrowcanedit(tr) {
                var tds = $(tr).find("td");
                $(tr).keypress(function () {
                    currenttr = tr;
                });
                return tds.each(function (j) {
                    if (op.ftb) {
                        if (j >= parseInt(op.ftb.fixedCols)) {
                            var edittype = $(ths[j]).attr("EditType");
                            if (edittype) {
                                $(this).bind("click", function (event, itd, ieditpye, ith) {
                                    if (itd) editcell(itd, ieditpye, ith); else editcell($(this), edittype, ths[j]);
                                });
                            }
                        }
                    } else {
                        var edittype = $(ths[j]).attr("EditType");
                        if (edittype) {
                            $(this).bind("click", function (event, itd, ieditpye, ith) {
                                if (itd) editcell(itd, ieditpye, ith); else editcell($(this), edittype, ths[j]);
                            });
                        }
                    }
                });
            };

            function init() {
                initHead();
                ths = getth();
                $th = $("<tr></tr>");
                $th.append($table.data("head"));
                currenttr = trs.eq(0);
                var chbox = $th.find("td:first").find(":checkbox");
                if (chbox) {
                    if (op.ftb) {
                        if (op.ftb.fixedCols > 1) {
                            var hebox = $table.parent().parent().find(".sFHeader>table>tbody>tr:first>td:first").find(":checkbox");
                            hebox.click(function () {
                                gettrs().each(function () {
                                    var cbox = $(this).find("td:first").find(":checkbox");
                                    if (cbox) {
                                        if (hebox.is(":checked")) cbox.attr("checked", "true"); else cbox.attr("checked", "");
                                    }
                                });
                                getsfdatatr().each(function () {
                                    var sfcbox = $(this).find("td:first").find(":checkbox");
                                    if (sfcbox) {
                                        if (hebox.is(":checked")) sfcbox.attr("checked", "true"); else sfcbox.attr("checked", "");
                                    }
                                });
                            });
                        } else {
                            var hebox = $table.parent().parent().find(".sFHeader>table>tbody>tr:first>td:first").find(":checkbox");
                            hebox.click(function () {
                                gettrs().each(function () {
                                    var cbox = $(this).find("td:first").find(":checkbox");
                                    if (cbox) {
                                        if (hebox.is(":checked")) cbox.attr("checked", "true"); else cbox.attr("checked", "");
                                    }
                                });
                            });
                        }
                    } else {
                        var rlchbox = $table.find("tr:first>td:first").find(":checkbox");
                        rlchbox.click(function () {
                            gettrs().each(function () {
                                var cbox = $(this).find("td:first").find(":checkbox");
                                if (cbox) {
                                    if (rlchbox.is(":checked")) cbox.attr("checked", "true"); else cbox.attr("checked", "");
                                }
                            });
                        });
                    }
                }
                ;$(document).unbind("keyup").bind("keyup", function (event) {
                    if (event.keyCode == 9) {
                        if (!edittd) {
                            var edittds = $th.find("td[EditType]");
                            var i = $th.find("td").index(edittds[0]);
                            var td = $(gettrs()[0]).find("td")[i];
                            edittd = td;
                            tabcut(td, i);
                        } else {
                            var j = $(edittd).parent().find("td").index(edittd);
                            var nxttd;
                            if (isbr) isbr = false; else j = j + 1;
                            for (var i = j; i < $th.children().size(); i++) {
                                nxttd = $th.find("td").eq(i);
                                if (nxttd.attr("EditType")) {
                                    edittd = $(edittd).parent().children().eq(i);
                                    j = i;
                                    break;
                                }
                            }
                            ;tabcut(edittd, j);
                        }
                        ;
                        if ($.browser.msie && op.ftb) $table.parent().scroll();
                    }
                });
                $table.data("ftb", op.ftb);
            };

            function initHead() {
                var lsttr = op.ftb ? $table.find("tr:lt(" + op.ftb.headerRows + "):last") : $table.find("tr:first");
                var dtr = $("<tr></tr>");
                var curtr = $table.find("tr").eq(0);
                var k = 0;
                for (var j = 0; j < curtr.children().size(); j++) {
                    var curtd = curtr.children().eq(j);
                    var rowspan = curtd.attr("rowspan");
                    var colspan = curtd.attr("colspan");
                    if (colspan > 1) {
                        for (var i = 0; i < colspan; i++) {
                            var dex = k + i;
                            dtr.append(lsttr.children().eq(dex).clone(true));
                        }
                        ;k = k + parseInt(colspan);
                    } else {
                        dtr.append(curtd.clone(true));
                    }
                }
                ;$table.data("head", dtr.html());
                $table.data("op", op);
            };

            function tabcut(td, i) {
                var edittype = $th.find("td").eq(i).attr("EditType");
                $(td).trigger("click", [td, edittype, $th.find("td")[i]]);
            };

            function getth() {
                return $($table.data("head"));
            };

            function gettrs() {
                return op.ftb ? $table.find("tr:gt(" + parseInt(op.ftb.headerRows - 1) + ")") : $table.find("tr").not(":first");
            };

            function getsfdatatr() {
                return $table.parent().parent().find(".sFData").find(".sFDataInner>table>tbody>tr");
            };

            function reSet() {
                th = _getth();
                trs = _gettrs();
            };

            function editcell(td, edittype, th) {
                setedittd(td);
                switch (edittype) {
                    case "TextBox":
                        CreateTextBox($(td));
                        break;
                    case "DropDownList":
                        CreateDropDownList(td, th);
                        break;
                    default:
                        break;
                }
            };

            function setedittd(td) {
                var i = $(td).parent().find("td").index(td);
                var lastdex = $th.find("td[EditType]:last").index();
                if (i == lastdex) {
                    if (currenttr) {
                        if ($table.find("tr").index(currenttr) < $table.find("tr").size()) {
                            currenttr = $(td).parent().next();
                            edittd = currenttr.find("td")[$th.find("td[EditType]:first").index()];
                            isbr = true;
                        }
                    }
                } else edittd = td;
            };

            function CreateTextBox(td) {
                var editState = td.attr("editState");
                if (editState != "true") {
                    var input = "<input type='text'></input>";
                    var ovalue = td.text();
                    ClearTd(td);
                    td.append(input);
                    var sput = td.find("input");
                    sput.css("border", "1px solid #0099CC");
                    sput.css("width", "90%");
                    sput.blur(function (event) {
                        var value = $(this).val();
                        if (ovalue !== value) {
                            $(this).parent().parent().data("changed", true);
                        }
                        ;CancelEditCell(td, $(this).val());
                    }).val(ovalue).focus().select();
                    sput.keypress(function (event) {
                        if (event.keyCode == 13) {
                            $(this).blur();
                        }
                    });
                }
                ;td.attr("editState", "true");
            };

            function CreateDropDownList(td, th) {
                var editState = $(td).attr("editState");
                if (editState != "true") {
                    var items = $(td).attr("DataItems");
                    if (!items) {
                        items = $(th).attr("DataItems");
                    }
                    ;
                    if (items) {
                        ClearTd(td);
                        $(td).append("<select> </select>");
                        var $down = $(td).find("SELECT");
                        $down.css("width", "90%");
                        items = eval("[" + items + "]");
                        for (var i = 0; i < items.length; i++) {
                            var oOption = "<option value=" + items[i].value + ">" + items[i].text + "</option>";
                            $down.append(oOption);
                        }
                    }
                    ;var value = $(td).attr("value");
                    $down.find("option[value=" + value + "]").attr("selected", "selected");
                    $down.blur(function (event) {
                        CancelEditCell(td, $(this).val(), $(this).find("option[selected]").text());
                    }).focus();
                    $(td).attr("editState", "true");
                }
            };

            function CancelEditCell(td, value, text) {
                $(td).attr("value", value);
                if (text) $(td).html(text); else $(td).html(value);
                $(td).attr("editState", "false");
                CheckExpression(td);
            };

            function ClearTd(td) {
                $(td).html("");
            };

            function CheckExpression(td) {
                var tds = $(td).parent().find("td");
                for (var i = 0; i < ths.size(); i++) {
                    var $th = $(ths[i]);
                    var exps = $th.attr("Expression");
                    if (exps) {
                        var ret = Expression(td, exps);
                        var format = $th.attr("Format");
                        if (format) {
                            var x = $.jtool.formatNumber(ret, format);
                            $(tds[i]).html(x);
                        } else {
                            $(tds[i]).html(ret);
                        }
                    }
                }
            };

            function Expression(td, expn) {
                var rowData = GetRowData(td);
                var $tr = $(td).parent();
                var $tds = $tr.find("td");
                for (var j = 0; j < $tds.size(); j++) {
                    name = $(ths[j]).attr("Name");
                    if (name) {
                        var reg = new RegExp(name, "i");
                        expn = expn.replace(reg, rowData[name].replace(/\,/g, ""));
                    }
                }
                ;
                try {
                    return eval(expn);
                } catch (e) {
                    return null;
                }
            };

            function GetRowData(td) {
                var $tr = $(td).parent();
                var tds = $tr.find("td");
                var rowData = {};
                for (var j = 0; j < tds.size(); j++) {
                    name = $(ths[j]).attr("Name");
                    if (name) {
                        var value = $(tds[j]).attr("value");
                        if (!value) {
                            value = $(tds[j]).html();
                        }
                        ;rowData[name] = value;
                    }
                }
                ;
                return rowData;
            }
        }
    });
    $.jtool = {
        formatNumber: function (num, pattern) {
            var strarr = num ? num.toString().split('.') : ['0'];
            var fmtarr = pattern ? pattern.split('.') : [''];
            var retstr = '';
            var str = strarr[0];
            var fmt = fmtarr[0];
            var i = str.length - 1;
            var comma = false;
            for (var f = fmt.length - 1; f >= 0; f--) {
                switch (fmt.substr(f, 1)) {
                    case '#':
                        if (i >= 0) retstr = str.substr(i--, 1) + retstr;
                        break;
                    case '0':
                        if (i >= 0) retstr = str.substr(i--, 1) + retstr; else retstr = '0' + retstr;
                        break;
                    case ',':
                        comma = true;
                        retstr = ',' + retstr;
                        break;
                }
            }
            ;
            if (i >= 0) {
                if (comma) {
                    var l = str.length;
                    for (; i >= 0; i--) {
                        retstr = str.substr(i, 1) + retstr;
                        if (i > 0 && ((l - i) % 3) == 0) retstr = ',' + retstr;
                    }
                } else retstr = str.substr(0, i + 1) + retstr;
            }
            ;retstr = retstr + '.';
            str = strarr.length > 1 ? strarr[1] : '';
            fmt = fmtarr.length > 1 ? fmtarr[1] : '';
            i = 0;
            for (var f = 0; f < fmt.length; f++) {
                switch (fmt.substr(f, 1)) {
                    case '#':
                        if (i < str.length) retstr += str.substr(i++, 1);
                        break;
                    case '0':
                        if (i < str.length) retstr += str.substr(i++, 1); else retstr += '0';
                        break;
                }
            }
            ;
            return retstr.replace(/^,+/, '').replace(/\.$/, '');
        }, addRow: function (id, option) {
            var $table = $("#" + id);
            this.table = $table;
            var op = eval($table.data("op"));
            this.op = op;
            var headerrows = null;
            var lasttr = null;
            var newtr = null;
            ;
            if (option) {
                var data = eval(option.data);
                var pkey = data.pkey;
                var values = data.value;
                var hd = $table.data("head");
                var ftb = $table.data("ftb");
                var tr = $("<tr></tr>");
                newtr = $("<tr></tr>");
                tr.append($(hd).clone(true));
                var x = $table.find("tr").size();
                for (var i = 0; i < values.length; i++) {
                    for (var j = 0; j < tr.find("td").size(); j++) {
                        var td = tr.find("td").eq(j);
                        if (td.children().size() > 0) {
                            var tdc = $("<td></td>").append(td.children().clone(true));
                            newtr.append(tdc);
                        } else {
                            newtr.append($("<td>" + values[i][j].value + "</td>"));
                        }
                    }
                    ;var ttr = newtr.clone();
                    ttr.data("pkey", pkey);
                    $table.append(ttr);
                    this._getsfdata().append(ttr.clone(true).data("pkey", pkey));
                    newtr = $("<tr></tr>");
                }
                ;$table.jGrid({ftb: ftb});
            }
        }, deleteRow: function (id, callback) {
            var confirm = window.confirm("ȷ��ɾ����");
            if (!confirm) return;
            var $table = $("#" + id);
            this.table = $table;
            var trs = this.table.find("tr");
            var keys = [];
            var delrow = 0;
            var ftb = $table.data("ftb");
            if (ftb) {
                if (ftb.fixedCols) {
                    if (ftb.fixedCols > 0) {
                        var sftrs = this._getsfdata().find("tr");
                        for (var i = ftb.headerRows; i < sftrs.size(); i++) {
                            var chbox = $(sftrs[i]).find("td:first").find(":checkbox");
                            if (chbox) {
                                if (chbox.is(":checked")) {
                                    var pkey = eval($(trs[i]).data("pkey"));
                                    keys.push(pkey);
                                    $(trs[i]).remove();
                                    $(sftrs[i]).remove();
                                    delrow++;
                                }
                            }
                        }
                    } else {
                    }
                }
            } else {
            }
            ;
            if (delrow == 0) {
                alert("��ѡ��ɾ���У�");
                return;
            }
            ;
            if (typeof(callback) == "function") {
                if (callback(keys)) {
                    alert("ɾ���ɹ���");
                } else alert("ɾ��ʧ�ܣ�");
            }
        }, _getth: function () {
            return $(this.table.data("head"));
        }, _gettrs: function () {
            if (typeof(this.op) == "undefined") {
                var op = eval($table.data("op"));
                this.op = op;
            }
            ;
            return this.op.ftb ? this.table.find("tr:gt(" + parseInt(this.op.ftb.headerRows - 1) + ")") : this.table.find("tr").not(":first");
        }, _getsfdata: function () {
            return this.table.parent().parent().find(".sFData").find(".sFDataInner>table>tbody");
        }, getchangetr: function () {
            var changes = [];
            var ftb = this.table.data("ftb");
            var colums = ftb.colums;
            var thtds = this._getth().find("td");
            this._gettrs().each(function (i) {
                var values = new Array();
                if ($(this).data("changed")) {
                    var pkey = $(this).data("pkey");
                    if (pkey) {
                        if (typeof(pkey) == "string") {
                            pkey = eval("(" + pkey + ")");
                        }
                    }
                    ;
                    for (var x = 0; x < colums.length; x++) {
                        var dex = thtds.find(":name=" + colums[x].name).index();
                        var value = $(this).find("td").eq(dex).attr("value");
                        values.push({key: colums[x].name, value: value});
                    }
                    ;changes.push({pkey: pkey, values: values});
                }
            });
            return changes;
        }, loaddata: function (id, options) {
            var op = $.extend({headerRows: 1}, options);
            var $table = $("#" + id);
            this.table = $table;
            var lsttr = $table.find("tr:lt(" + op.headerRows + "):last");
            var dtr = $("<tr></tr>");
            var curtr = $table.find("tr").eq(0);
            var k = 0;
            for (var j = 0; j < curtr.children().size(); j++) {
                var curtd = curtr.children().eq(j);
                var rowspan = curtd.attr("rowspan");
                var colspan = curtd.attr("colspan");
                if (colspan > 1) {
                    for (var i = 0; i < colspan; i++) {
                        var dex = k + i;
                        dtr.append(lsttr.children().eq(dex).clone(true));
                    }
                    ;k = k + parseInt(colspan);
                } else {
                    dtr.append(curtd.clone(true));
                }
            }
            ;$table.data("head", dtr.html());
            var values = op.data.value;
            var hd = $table.data("head");
            var tr = $("<tr></tr>");
            newtr = $("<tr></tr>");
            tr.append($(hd).clone(true));
            var x = $table.find("tr").size();
            for (var i = 0; i < values.length; i++) {
                for (var j = 0; j < tr.find("td").size(); j++) {
                    var td = tr.find("td").eq(j);
                    if (td.children().size() > 0) {
                        var tdc = $("<td></td>").append(td.children().clone(true));
                        newtr.append(tdc);
                    } else {
                        newtr.append($("<td>" + values[i][j].value + "</td>"));
                    }
                }
                ;var ttr = newtr.clone();
                ttr.data("pkey", op.data.pkey);
                $table.append(ttr);
                newtr = $("<tr></tr>");
            }
        }
    }
})(jQuery);


